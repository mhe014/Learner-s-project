#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <conio.h>
#include <windows.h>
#include <math.h>

char randomLetter(void);
int randomDigit(void);
char* randomPassword(int length) ;
void passwordgeneration(int choice, int n, int returnToSelection);
int passwordlength();
void selectPasswordType(int length);
int getMenuChoice() ;

int main()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN);

    srand(time(NULL)); // seed randomness
    int choice = 0; // store user choice
    int length = 0; // store password length

    while(1)
    {
    printf("##########随机密码生成器##########\n\n");
    printf("1) 六位数字密码\n");
    printf("2) 六位字母密码\n");
    printf("3) 六位字母数字标点混合密码 \n");
    printf("4) 自定义密码长度\n\n");

    switch(getMenuChoice())
    {
    case 1:
        //call randomDigit() function and pass it to the matrix, produce digits
         passwordgeneration(1,6,0);
        break;
    case 2:

        //call randomLetter() function and pass it to the matrix. produce letters
        passwordgeneration(2,6,0);
        break;
    case 3:
        //call randomPassword() and randomDigit function and produce a mix
        passwordgeneration(3,6,0);
        break;
    case 4:
        //call randomPassword() and randomDigit function and produce a mix
        length = passwordlength();
        selectPasswordType(length);
        break;
    }

}

    return 0;
}



char randomLetter(void)
{
    if (rand() % 2 == 0)
    {
        return (char)(rand() % (26) + 'A'); // Uppercase letters
    }
    else
    {
        return (char)(rand() % (26) + 'a'); // Lowercase letters
    }
}

int randomDigit(void)
{
    return rand() % 10; // Return a random digit between 0 and 9
}

char* randomPassword(int length)
{
    static char password[100]; // Password length 6 plus null terminator
    const char characters[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\",.<>?/";
    int charactersSize = sizeof(characters) - 1;

    for (int i = 0; i < length; i++) {
        password[i] = characters[rand() % charactersSize];
    }

    password[length] = '\0'; // Null-terminate the string
    return password;
}

int passwordlength()
{
    int length;
    char inputBuffer[50]; // Buffer to store the input line

    do {
        printf("输入自定义密码长度 (1-20): ");
        fgets(inputBuffer, sizeof(inputBuffer), stdin); // Read the entire line
        if (sscanf(inputBuffer, "%d", &length) != 1 || length < 1 || length > 20) {
            printf("无效长度，请重新输入.\n");
        }
    } while(length < 1 || length > 20);

    return length;
}


void passwordgeneration (int choice, int n, int returnToSelection)
{
    char key;
    while(1)
    {
        int a[30][30]= {0};
        system("cls");
        printf("                   按空格键暂停并显示密码 \n");
        for (int i = 0; i < 20; i++)
            {
                for (int j = 0; j < 20; j++)
                {
                    if (i == 0 && j < n && choice == 3 ||choice == 4)
                    {
                        char *password = randomPassword(n);
                        for (int k = 0; k < n; k++)
                            {
                            a[i][k] = password[k];
                            }
                    }
                    else if (choice == 1 ||choice == 4)
                    {
                        a[i][j] = randomDigit() + '0';
                    }
                    else if (choice == 2 ||choice == 4)
                    {
                        a[i][j] = randomLetter();
                    }
                    else if (choice == 3 ||choice == 4)
                    {
                        a[i][j] = randomPassword(n)[rand() % 6]; // Just use any character from the password for the rest of the matrix
                    }
                    printf("%c  ", a[i][j]);

                }
                printf("\n");
                }
                usleep(1000);

        if (kbhit())
        {
            if (getch() == ' ') //compare against key
            {
                printf("随机密码: ");
                for (int i = 0; i < 1; i++)
                {
                    for (int j = 0; j < n; j++)
                    {
                    printf("%c", a[i][j]);
                    }
                }
                printf("\n");
                printf("暂停. 按<空格键>继续生产随机密码\n");
                printf("暂停. 按<Backspace>键回到菜单\n");

                while (1)
                {
                    if(kbhit())
                    {
                        key = getch();
                        if(key == ' ') //check space key
                        {
                            if(returnToSelection)
                            {
                                selectPasswordType(n);
                                return;
                            }
                            break;
                        }
                        else if(key == 8)
                        {
                            system("cls");
                            return;
                        }
                        else if(key == 'q')
                        {
                            exit(0);
                        }


                    }

                }
            }
        }
    }
}

void selectPasswordType(int length)
{
    int typeChoice;
    printf("选择密码类型或自定义密码:\n");
    printf("1) 全数字密码\n");
    printf("2) 全字母密码\n");
    printf("3) 混合密码\n");
    printf("输入选择并按<回车>: ");
    scanf("%d", &typeChoice);
    clearInputBuffer();
    passwordgeneration(typeChoice, length,1);
}

int getMenuChoice()
{
    int choice;
    char inputBuffer[50]; // Buffer to store the input line

    do {
        printf("输入数字选择1或2或3或4并按回车: ");
        fgets(inputBuffer, sizeof(inputBuffer), stdin); // Read the entire line
        if (sscanf(inputBuffer, "%d", &choice) != 1 || choice < 1 || choice > 4) {
            printf("无效选择，请重新输入.\n");
        }
    } while(choice < 1 || choice > 4);

    return choice;
}

void clearInputBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) ; // discard characters until newline or end-of-file
}





